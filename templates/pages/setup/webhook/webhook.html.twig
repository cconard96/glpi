{#
 # ---------------------------------------------------------------------
 #
 # GLPI - Gestionnaire Libre de Parc Informatique
 #
 # http://glpi-project.org
 #
 # @copyright 2015-2023 Teclib' and contributors.
 # @copyright 2003-2014 by the INDEPNET Development Team.
 # @licence   https://www.gnu.org/licenses/gpl-3.0.html
 #
 # ---------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of GLPI.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 # ---------------------------------------------------------------------
 #}

{% extends "generic_show_form.html.twig" %}
{% import 'components/form/fields_macros.html.twig' as fields %}
{% set params  = params ?? [] %}
{% set rand_field = rand|default(random()) %}

{% block more_fields %}

    {{ fields.nullField() }}

    {{ fields.dropdownArrayField(
        'itemtype',
        item.fields['itemtype'],
        item.getGlpiItemtypes(),
        __('Itemtype'),
        field_options|merge({
            display_emptychoice: true,
            rand: rand_field,
        })
    ) }}

    {{ fields.dropdownArrayField(
        'event',
        item.fields['event'],
        item.getGlpiEventsList(item.fields['itemtype']),
        _n('Event', 'Events', 1),
        field_options|merge({
            display_emptychoice: true,
            container_id: 'show_event_field',
        })
    ) }}

    {% do call('Ajax::updateItemOnSelectEvent', [
        'dropdown_itemtype' ~ rand_field,
        'show_event_field',
        config('root_doc') ~ '/ajax/webhook.php',
        {
        'itemtype': '__VALUE__',
        'action': 'get_events_from_itemtype'
        }
    ]) %}

    <div class="hr-text">
        <i class="ti ti-viewfinder"></i>
        <span>{{ _n('Target', 'Targets', 1) }}</span>
    </div>

    {{ fields.textField(
        'url',
        item.fields['url'],
        __('URL'),
        field_options
    ) }}

    {% set warning_url %}
        <div class="alert alert-warning d-flex align-items-center" role="alert">
            <i class='ti ti-alert-triangle-filled'></i>
            <div>
                <span class='ms-2'>
                    {{ __('Is strongly advised to use the https protocol') }}
                </span>
            </div>
        </div>
    {% endset %}

    {{ fields.htmlField('', warning_url, '') }}

    {{ fields.dropdownArrayField(
        'http_method',
        item.fields['http_method'],
        item.getHttpMethod(),
        __('HTTP method'),
        field_options
    ) }}

    <div class="hr-text">
        <i class="fa-solid fa-shield-halved"></i>
        <span>{{ __('Security') }}</span>
    </div>

    {{ fields.passwordField(
        'secret',
        item.fields['secret'],
        __('Secret'),
        field_options|merge({
            is_disclosable: true,
            can_regenerate: true
        })
    ) }}

    {% if secret_already_used is not empty %}
        {% set warning_secret_already_used %}
            <div class="alert alert-warning align-items-center flex-column" role="alert">
                <i class='ti ti-alert-triangle-filled'></i>
                    <span class='ms-2'>
                        {{ __('Secret is already use by another webhooks') }}
                    </span>

                    <span>
                        {% for webhook in secret_already_used %}
                        <li  class='ms-4'>{{ webhook.link|raw }}</li>
                        {% endfor %}
                    </span>
            </div>
        {% endset %}
        {{ fields.htmlField('', warning_secret_already_used, '') }}
    {% else %}
        {{ fields.nullField() }}
    {% endif %}

    {{ fields.dropdownTimestampField(
        'expiration',
        item.fields['expiration'],
        __('Expiration delay'),
        field_options|merge({
            'emptylabel': __('Disabled'),
            'min': 0,
            'max': constant('HOUR_TIMESTAMP') * 23,
            'step': constant('HOUR_TIMESTAMP'),
            'toadd': [
                constant('MINUTE_TIMESTAMP'),
                constant('MINUTE_TIMESTAMP') * 2,
                constant('MINUTE_TIMESTAMP') * 5,
                constant('MINUTE_TIMESTAMP') * 10,
                constant('MINUTE_TIMESTAMP') * 15,
                constant('MINUTE_TIMESTAMP') * 20,
                constant('MINUTE_TIMESTAMP') * 30,
                constant('HOUR_TIMESTAMP'),
                constant('HOUR_TIMESTAMP') * 2,
                constant('HOUR_TIMESTAMP') * 6,
                constant('HOUR_TIMESTAMP') * 12,
            ],
            'width': 'auto',
        })
    ) }}

    <div class="hr-text">
        <i class="ti ti-key"></i>
        <span>{{ __('Target authentication') }}</span>
    </div>

    {{ fields.checkboxField(
        'use_cra_challenge',
        item.fields['use_cra_challenge'],
        __('Use CRA Challenge ?'),
        field_options
    ) }}

    {% set info_cra_challenge %}
        <div class="alert alert-info" role="alert">
            <i class="fas fa-info-circle"></i>
            <span class="ms-2">
               {{ __('Challengeâ€“response authentication is a family of protocols in which one party presents a question ("challenge")
               and another party must provide a valid answer ("response") to be authenticated.') }}
            </span>
         </div>
    {% endset %}

    {{ fields.htmlField('', info_cra_challenge, '') }}

    {% set cra_btn %}
        <button class="btn btn-primary me-2" type="button" name="validate_challenge" value="1">
            <i class="fa-solid fa-flag-checkered"></i>
            <span>{{ _x('button', 'Validate') }}</span>
        </button>
    {% endset %}

    {{ fields.htmlField(
        '',
        cra_btn,
        __('CRA Challenge'),
        field_options|merge({
            add_field_class: (item.fields['use_cra_challenge']) ? '' : 'd-none',
        })
    ) }}

    {% set cra_challenge_infi %}
        <span name="cra_result">
            {{ item.fields['is_cra_challenge_valid'] ? '<i class="fa-solid fa-circle-check fa-beat fa-lg" style="color: #36d601;"></i>' : '<i class="fa-solid fa-triangle-exclamation fa-beat fa-lg" style="color: #ff0000;"></i>' }}
        </span>
    {% endset %}

    {{ fields.htmlField(
        '',
        cra_challenge_infi,
        __('CRA result'),
        field_options|merge({
            add_field_class: (item.fields['use_cra_challenge']) ? '' : 'd-none',
        })
    ) }}

    {{ fields.hiddenField(
        'is_cra_challenge_valid',
        item.fields['is_cra_challenge_valid'],
        '',
        field_options|merge({
            add_field_class: (item.fields['use_cra_challenge']) ? '' : 'd-none',
        })
    ) }}

    <div class="hr-text">
        <i class="ti ti-adjustments"></i>
        <span>{{ __('Other') }}</span>
    </div>

    {{ fields.dropdownNumberField(
        'sent_try',
        item.fields['sent_try'],
        __('Number of retries'),
        {
        'min': 3,
        'max': 5,
        'step': 1,
        }
    ) }}

    <script>
        $('input[name="use_cra_challenge"]').change(function () {
            if ($('input[name="use_cra_challenge"]').is(":checked") ) {
                $('input[name="is_cra_challenge_valid"]').val(0);
                $('button[name="validate_challenge"]').parent().parent().parent().removeClass('d-none');
                $('span[name="cra_result"]').parent().parent().parent().removeClass('d-none');
                $('button[name="validate_challenge"]').trigger('click');
            } else {
                $('input[name="is_cra_challenge_valid"]').val(0);
                $('button[name="validate_challenge"]').parent().parent().parent().addClass('d-none');
                $('span[name="cra_result"]').parent().parent().parent().addClass('d-none');
            }
        });

        $('button[name="validate_challenge"]').click(function () {
            target_url = $('input[name="url"]').val();
            secret = $('input[name="secret"]').val();

            $.ajax({
                type: 'POST',
                url: '{{ path('/ajax/webhook.php') }}',
                dataType: 'json',
                data: {
                    action: 'valide_cra_challenge',
                    target_url: target_url,
                    secret: secret,
                },
                success: function(json_response) {
                    console.log(json_response);

                    if (json_response.status) {
                        $('input[name="is_cra_challenge_valid"]').val(1);
                        $('span[name="cra_result"]').html('<i class="fa-solid fa-circle-check fa-beat fa-lg" style="color: #36d601;"></i> ' + (json_response.status_code ? json_response.status_code + ' ' : ' ') + json_response.message);
                    } else {
                        $('input[name="is_cra_challenge_valid"]').val(0);
                        $('span[name="cra_result"]').html('<i class="fa-solid fa-triangle-exclamation fa-beat fa-lg" style="color: #ff0000;"></i> ' + (json_response.status_code ? json_response.status_code + ' ' : ' ') + json_response.message);
                    }
                },
            });

        });

        $(function() {
            if ($('input[name="use_cra_challenge"]').is(":checked") ) {
                $('button[name="validate_challenge"]').click();
            }
        });

    </script>

{% endblock %}
