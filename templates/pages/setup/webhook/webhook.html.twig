{#
 # ---------------------------------------------------------------------
 #
 # GLPI - Gestionnaire Libre de Parc Informatique
 #
 # http://glpi-project.org
 #
 # @copyright 2015-2023 Teclib' and contributors.
 # @copyright 2003-2014 by the INDEPNET Development Team.
 # @licence   https://www.gnu.org/licenses/gpl-3.0.html
 #
 # ---------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of GLPI.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <https://www.gnu.org/licenses/>.
 #
 # ---------------------------------------------------------------------
 #}

{% extends "generic_show_form.html.twig" %}
{% import 'components/form/fields_macros.html.twig' as fields %}
{% set params  = params ?? [] %}
{% set rand_field = rand|default(random()) %}

{% block more_fields %}

    {{ fields.nullField() }}

    {{ fields.dropdownArrayField(
        'itemtype',
        item.fields['itemtype'],
        item.getItemtypesDropdownValues(),
        __('Itemtype'),
        field_options|merge({
            display_emptychoice: item.isNewItem(),
            rand: rand_field,
        })
    ) }}

    {{ fields.dropdownArrayField(
        'event',
        item.fields['event'],
        item.getGlpiEventsList(item.fields['itemtype']),
        _n('Event', 'Events', 1),
        field_options|merge({
            display_emptychoice: item.isNewItem(),
            container_id: 'show_event_field',
        })
    ) }}

    {% do call('Ajax::updateItemOnSelectEvent', [
        'dropdown_itemtype' ~ rand_field,
        'show_event_field',
        config('root_doc') ~ '/ajax/webhook.php',
        {
        'itemtype': '__VALUE__',
        'action': 'get_events_from_itemtype'
        }
    ]) %}

    {{ fields.numberField(
        'sent_try',
        item.fields['sent_try'],
        __('Number of retries'),
        {
            'min': 0
        }
    ) }}

    <div class="hr-text">
        <i class="ti ti-viewfinder"></i>
        <span>{{ _n('Target', 'Targets', 1) }}</span>
    </div>

    {{ fields.textField(
        'url',
        item.fields['url'],
        __('URL'),
        field_options|merge({
            helper: __('It is strongly advised to use the HTTPS protocol')
        })
    ) }}

    {{ fields.dropdownArrayField(
        'http_method',
        item.fields['http_method'],
        item.getHttpMethod(),
        __('HTTP method'),
        field_options
    ) }}

    <div class="hr-text">
        <i class="ti ti-viewfinder"></i>
        <span>{{ _n('Custom header', 'Custom headers', get_plural_number()) }}</span>
    </div>

    <template id="custom-header-fields-template">
        {% set header_field_pair %}
            {{ fields.textField('header_name[]', '', '', {
                no_label: true,
                field_class: 'col-4',
            }) }}
            <span class="mx-2">=</span>
            {% set remove_btn %}
                <button class="btn btn-danger btn-icon" name="remove_header" type="button" title="{{ __('Remove') }}">
                    <i class="ti ti-trash"></i>
                </button>
            {% endset %}
            {{ fields.textField('header_value[]', '', '', {
                no_label: true,
                field_class: 'col-12 col-sm-6 d-flex',
                add_field_html: remove_btn,
            }) }}
        {% endset %}
        {{ fields.field('custom_header[]', header_field_pair, '', {
            no_label: true,
            input_class: 'col-12',
            field_class: 'col-12 d-flex custom-header-field-pair',
        }) }}
    </template>

    <div class="custom-header-fields">
        <button class="btn btn-secondard" name="add_header" type="button">
            <i class="ti ti-plus"></i>
            {{ __('Add a custom header') }}
         </button>
    </div>

    <script>
        const add_custom_header = (name, value, readonly) => {
            const custom_header_fields_container = $('div.custom-header-fields');
            const template = $($('#custom-header-fields-template').html());
            const header_name_field = template.find('input[name="header_name[]"]');
            const header_value_field = template.find('input[name="header_value[]"]');
            header_name_field.val(name);
            header_value_field.val(value);
            if (readonly) {
                header_name_field.prop('readonly', true);
                header_value_field.prop('readonly', true);
                // Delete the remove button
                template.find('button[name="remove_header"]').remove();
            }
            // insert the template before the add button
            custom_header_fields_container.find('button[name="add_header"]').before(template);
        };
        $(() => {
            const known_custom = {{ item.fields['custom_headers']|default([])|json_encode(constant('JSON_FORCE_OBJECT'))|raw }};
            add_custom_header('X-GLPI-signature', __('Filled automatically'), true);
            add_custom_header('X-GLPI-timestamp', __('Filled automatically'), true);
            for (const [name, value] of Object.entries(known_custom)) {
                add_custom_header(name, value);
            }
            $('div.custom-header-fields button[name="add_header"]').click(() => {
                add_custom_header('', '');
            });
            $('div.custom-header-fields button[name="remove_header"]').click((e) => {
                $(e.target).closest('.custom-header-field-pair').remove();
            });
        });
    </script>

{% endblock %}
